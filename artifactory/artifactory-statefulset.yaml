apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: artifactory
  labels:
    app: artifactory
    chart: artifactory-107.39.4
    component: artifactory
    heritage: Helm
    release: artifactory
spec:
  serviceName: artifactory
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: artifactory
      role: artifactory
      release: artifactory
  template:
    metadata:
      labels:
        app: artifactory
        chart: artifactory-107.39.4
        heritage: Helm
        role: artifactory
        component: artifactory
        release: artifactory
      annotations:
        checksum/database-secrets: fd830412432443f108ca52136a298d4657349c9c48763ea4f35b44d65eb929db
        checksum/binarystore: 8c237cef6b5ecd7d0c3527f7689bc877db532dafb6db8750f79e2ff1f7285bc6
        checksum/systemyaml: dcc7f3df1aff1fc1be232bd95a98bff18a89b08c7396391257fc3b7767ba44df
        checksum/access-config: b4e808c9f6fc0f53a782e789123029c4127e730571a54b9b130e420d13c141a8
        checksum/admin-creds: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      securityContext:
        runAsUser: 1030
        fsGroup: 1030
      initContainers:
        - name: "delete-db-properties"
          image: "releases-docker.jfrog.io/jfrog/ubi-minimal:8.5-204"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 10m
              memory: 50Mi
          command:
            - 'bash'
            - '-c'
            - 'rm -fv /var/opt/jfrog/artifactory/etc/db.properties'
          volumeMounts:
            - name: artifactory-data
              mountPath: "/var/opt/jfrog/artifactory"
        - name: "remove-lost-found"
          image: "releases-docker.jfrog.io/jfrog/ubi-minimal:8.5-204"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 10m
              memory: 50Mi
          command:
            - 'bash'
            - '-c'
            - 'rm -rfv /var/opt/jfrog/artifactory/lost+found /var/opt/jfrog/artifactory/data/.lock'
          volumeMounts:
            - name: artifactory-data
              mountPath: "/var/opt/jfrog/artifactory"
        - name: 'copy-system-yaml'
          image: 'releases-docker.jfrog.io/jfrog/ubi-minimal:8.5-204'
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 10m
              memory: 50Mi
          command:
            - '/bin/bash'
            - '-c'
            - >
              if [[ -e "/var/opt/jfrog/artifactory/etc/filebeat.yaml" ]]; then chmod 644 /var/opt/jfrog/artifactory/etc/filebeat.yaml; fi;
              echo "Copy system.yaml to /var/opt/jfrog/artifactory/etc";
              mkdir -p /var/opt/jfrog/artifactory/etc;
              mkdir -p /var/opt/jfrog/artifactory/etc/access/keys/trusted;
              cp -fv /tmp/etc/system.yaml /var/opt/jfrog/artifactory/etc/system.yaml;
              echo "Remove /var/opt/jfrog/artifactory/lost+found folder if exists";
              rm -rfv /var/opt/jfrog/artifactory/lost+found;
              echo "Copy access.config.patch.yml to /var/opt/jfrog/artifactory/etc/access";
              mkdir -p /var/opt/jfrog/artifactory/etc/access;
              cp -fv /tmp/etc/access.config.patch.yml /var/opt/jfrog/artifactory/etc/access/access.config.patch.yml;
              echo "Copy joinKey to /var/opt/jfrog/artifactory/bootstrap/access/etc/security";
              mkdir -p /var/opt/jfrog/artifactory/bootstrap/access/etc/security;
              echo -n ${ARTIFACTORY_JOIN_KEY} > /var/opt/jfrog/artifactory/bootstrap/access/etc/security/join.key;
              echo "Copy masterKey to /var/opt/jfrog/artifactory/etc/security";
              mkdir -p /var/opt/jfrog/artifactory/etc/security;
              echo -n ${ARTIFACTORY_MASTER_KEY} > /var/opt/jfrog/artifactory/etc/security/master.key;
          env:
            - name: ARTIFACTORY_JOIN_KEY
              valueFrom:
                secretKeyRef:
                  name: artifactory
                  key: join-key
            - name: ARTIFACTORY_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: artifactory
                  key: master-key
          volumeMounts:
            - name: artifactory-data
              mountPath: "/var/opt/jfrog/artifactory"
            - name: systemyaml
              mountPath: "/tmp/etc/system.yaml"
              subPath: system.yaml
            - name: access-config
              mountPath: "/tmp/etc/access.config.patch.yml"
              subPath: access.config.patch.yml
        - name: 'migration-artifactory'
          image: releases-docker.jfrog.io/jfrog/artifactory-pro:7.41.12
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          command:
            - '/bin/bash'
            - '-c'
            - >
              scriptsPath="/opt/jfrog/artifactory/app/bin";
              mkdir -p $scriptsPath;
              echo "Copy migration scripts and Run migration";
              cp -fv /tmp/migrate.sh $scriptsPath/migrate.sh;
              cp -fv /tmp/migrationHelmInfo.yaml $scriptsPath/migrationHelmInfo.yaml;
              cp -fv /tmp/migrationStatus.sh $scriptsPath/migrationStatus.sh;
              mkdir -p /var/opt/jfrog/artifactory/log;
              bash $scriptsPath/migrationStatus.sh 7.39.4 3600 > >(tee /var/opt/jfrog/artifactory/log/helm-migration.log) 2>&1;
          env:
          - name: JF_SHARED_DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: artifactory-database-creds
                key: db-user

          - name: JF_SHARED_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: artifactory-database-creds
                key: db-password
          - name: JF_SHARED_DATABASE_URL
            valueFrom:
              secretKeyRef:
                name: artifactory-database-creds
                key: db-url
          volumeMounts:
            - name: migration-scripts
              mountPath: "/tmp/migrate.sh"
              subPath: migrate.sh
            - name: migration-scripts
              mountPath: "/tmp/migrationHelmInfo.yaml"
              subPath: migrationHelmInfo.yaml
            - name: migration-scripts
              mountPath: "/tmp/migrationStatus.sh"
              subPath: migrationStatus.sh
            - name: artifactory-data
              mountPath: "/var/opt/jfrog/artifactory"
            - name: artifactory-backup
              mountPath: "/var/opt/jfrog/artifactory-backup"
      containers:
        - name: artifactory
          image: releases-docker.jfrog.io/jfrog/artifactory-pro:7.41.12
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - NET_RAW
          command:
            - '/bin/bash'
            - '-c'
            - >
              set -e;
              if [ -d /artifactory_extra_conf ] && [ -d /artifactory_bootstrap ]; then
                echo "Copying bootstrap config from /artifactory_extra_conf to /artifactory_bootstrap";
                cp -Lrfv /artifactory_extra_conf/ /artifactory_bootstrap/;
              fi;
              exec /entrypoint-artifactory.sh
          env:
          - name: JF_SHARED_NODE_HAENABLED
            value: "true"
          - name: JF_SHARED_DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: artifactory-database-creds
                key: db-user

          - name: JF_SHARED_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: artifactory-database-creds
                key: db-password
          - name: JF_SHARED_DATABASE_URL
            valueFrom:
              secretKeyRef:
                name: artifactory-database-creds
                key: db-url
          ports:
            - containerPort: 8082
              name: http
            - containerPort: 8081
              name: http-internal
          volumeMounts:
            - name: artifactory-data
              mountPath: "/var/opt/jfrog/artifactory"
            - name: artifactory-backup
              mountPath: "/var/opt/jfrog/artifactory-backup"
            - name: installer-info
              mountPath: "/artifactory_bootstrap/info/installer-info.json"
              subPath: installer-info.json
          startupProbe:
            exec:
              command:
                - sh
                - -c
                - curl -s -k --fail --max-time 5 http://localhost:8091/artifactory/api/v1/system/readiness
            initialDelaySeconds: 10
            failureThreshold: 90
            periodSeconds: 5
            timeoutSeconds: 5

          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - curl -s -k --fail --max-time 5 http://localhost:8091/artifactory/api/v1/system/liveness
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 10
            successThreshold: 1


      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: artifactory
                    release: artifactory
      volumes:
        - name: binarystore-xml
          secret:
            secretName: artifactory-binarystore
        - name: migration-scripts
          configMap:
            name: artifactory-migration-scripts
        - name: installer-info
          configMap:
            name: artifactory-installer-info
        - name: artifactory-data
          persistentVolumeClaim:
            claimName: artifactory-data-pvc
        - name: artifactory-backup
          persistentVolumeClaim:
            claimName: artifactory-backup-pvc
        - name: systemyaml
          secret:
            secretName: artifactory-systemyaml
        - name: access-config
          secret:
            secretName: artifactory-access-config
  #volumeClaimTemplates:
  #  - metadata:
  #      name: artifactory-volume
  #    spec:
  #      storageClassName: "nfs-storageclass"
  #      accessModes: [ "ReadWriteMany" ]
  #      resources:
  #        requests:
  #          storage: 10G